name: SGSI_Build

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'ROM_URL'
        required: true
        default: 'https://bkt-sgp-miui-ota-update-alisgp.oss-ap-southeast-1.aliyuncs.com/21.12.27/miui_EVERGO_21.12.27_afa92d26ca_11.0.zip'
      ZIP_NAME:
        description: 'ZIP_NAME'
        required: true
        default: 'miui_TUCANA_21.5.31_cb42ec9bed_11.0.zip'
      OS_TYPE:
        description: 'OS_TYPE'
        required: true
        default: 'miui'
      SGSI_TYPE:
        description: 'SGSI_TYPE(AB, A, or BOTH)'
        required: true
        default: 'AB'
      REPACK_NAME:
        description: 'REPACK_NAME'
        required: true
        default: 'SGSI.zip'




jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Get the source code of this repositorie...
        uses: actions/checkout@main
        with: 
          python-version: '3.9'
          
      - name: Get variable configuration...
        run: |
          echo "BUILD_TIME=$(date +%s | md5sum | awk '{print substr($1,1,10)}')" >> $GITHUB_ENV

      - name: Clean up the environment
        run: |
         sudo apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
         sudo apt-get update
         sudo apt-get -y autoremove
         sudo apt-get clean

      - name: Install Python 2
        run: |
         sudo apt-get update 
         sudo apt-get install -y software-properties-common
         sudo add-apt-repository -y ppa:deadsnakes/ppa
         sudo apt-get update
         sudo apt-get install -y python2
         curl -sS https://bootstrap.pypa.io/pip/2.7/get-pip.py | sudo python2

         # 3. 明确安装 protobuf 的 Python 2 兼容版本
         sudo python2 -m pip install --upgrade "protobuf==3.17.3" --ignore-installed

         # 4. 验证安装
         python2 -c "from google.protobuf import descriptor; print('Protobuf 模块已正确安装')"
         # 创建 python 软链接（因为 Ubuntu 22.04 默认只安装 python2，不创建 python 命令）
         sudo ln -sf /usr/bin/python2 /usr/bin/python
         python -m pip install --upgrade pip
         python -m pip install protobuf==3.17.3

      - name: Install system dependencies
        run: |
         sudo apt-get update
         sudo apt-get install -y liblzma-dev

        
      - name: Install Python dependencies
        run: |
         python -m pip install --upgrade pip
         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Configuration Environment‌‌...
        run: |
          sudo apt-get install -y git wget git zip unzip curl axel

      - name: Get the SGSI tool‌‌...
        run: |
          git clone --recurse-submodules https://github.com/Kauid323/SGSI-build-tool.git -b 11 $GITHUB_WORKSPACE/Tool-SGSI-build

      - name: Replace custom condensed content...
        run: |
          sudo rm -rf $GITHUB_WORKSPACE/Tool-SGSI-build/apps_clean
          sudo cp -r apps_clean $GITHUB_WORKSPACE/Tool-SGSI-build/apps_clean
          sudo chmod 777 -R $GITHUB_WORKSPACE/Tool-SGSI-build

      - name: Download ROM‌‌...
        run: |
          cd $GITHUB_WORKSPACE/Tool-SGSI-build
          mkdir ./tmp
          wget -U "Mozilla/5.0" ${{ github.event.inputs.ROM_URL }} -O "$GITHUB_WORKSPACE/Tool-SGSI-build/tmp/${{ github.event.inputs.ZIP_NAME }}"
          echo "zip_file: $(ls "$GITHUB_WORKSPACE/Tool-SGSI-build/tmp/")"

      - name: Configuration tool environment...
        run: |
          sudo sed -i 's/USE_MIRROR_FOR_PIP\=true/USE_MIRROR_FOR_PIP\=false/' $GITHUB_WORKSPACE/Tool-SGSI-build/setup.sh
          sudo bash $GITHUB_WORKSPACE/Tool-SGSI-build/setup.sh
          java -version

      - name: Make AB type GSI‌‌...
        if: ${{ github.event.inputs.SGSI_TYPE }} == 'AB' || ${{ github.event.inputs.SGSI_TYPE }} == 'BOTH'
        run: |
          sudo bash $GITHUB_WORKSPACE/Tool-SGSI-build/make.sh AB << EOF
          ${{ github.event.inputs.ZIP_NAME }}
          y
          y
          ${{ github.event.inputs.OS_TYPE }}
          y

      - name: Packing(AB)...
        if: ${{ github.event.inputs.SGSI_TYPE }} == 'AB' || ${{ github.event.inputs.SGSI_TYPE }} == 'BOTH'
        run: |
          cd $GITHUB_WORKSPACE/Tool-SGSI-build
          pwd
          zip -r AB_${{ github.event.inputs.REPACK_NAME }} SGSI/*
          ls "AB_${{ github.event.inputs.REPACK_NAME }}"
          echo "--------------------------------------"
          ls
          echo "--------------------------------------"
          mkdir upload_ab
          echo "--------------------------------------"
          ls upload_ab
          echo "--------------------------------------"
          if [ $(ls -l AB_${{ github.event.inputs.REPACK_NAME }} | awk '{print $5}') -gt 2147483647 ]; then tar cvzpf - AB_${{ github.event.inputs.REPACK_NAME }} | split -d -b 1024m - upload_ab/AB_${{ github.event.inputs.REPACK_NAME }}; else mv AB_${{ github.event.inputs.REPACK_NAME }} upload_ab/AB_${{ github.event.inputs.REPACK_NAME }}; fi
          echo "--------------------------------------"
          ls upload_ab
          echo "--------------------------------------"

      - name: Make A-only type GSI‌‌...
        if: ${{ github.event.inputs.SGSI_TYPE }} == 'A' || ${{ github.event.inputs.SGSI_TYPE }} == 'BOTH'
        run: |
          sudo bash $GITHUB_WORKSPACE/Tool-SGSI-build/make.sh A << EOF
          ${{ github.event.inputs.ZIP_NAME }}
          y
          y
          ${{ github.event.inputs.OS_TYPE }}
          y

      - name: Packing(A-only)...
        if: ${{ github.event.inputs.SGSI_TYPE }} == 'A' || ${{ github.event.inputs.SGSI_TYPE }} == 'BOTH'
        run: |
          cd $GITHUB_WORKSPACE/Tool-SGSI-build
          pwd
          zip -r AONLY_${{ github.event.inputs.REPACK_NAME }} SGSI/*
          ls "AONLY_${{ github.event.inputs.REPACK_NAME }}"
          echo "--------------------------------------"
          ls
          echo "--------------------------------------"
          mkdir upload_aonly
          echo "--------------------------------------"
          ls upload_aonly
          echo "--------------------------------------"
          if [ $(ls -l AONLY_${{ github.event.inputs.REPACK_NAME }} | awk '{print $5}') -gt 2147483647 ]; then tar cvzpf - AONLY_${{ github.event.inputs.REPACK_NAME }} | split -d -b 1024m - upload_aonly/AONLY_${{ github.event.inputs.REPACK_NAME }}; else mv AONLY_${{ github.event.inputs.REPACK_NAME }} upload_aonly/AONLY_${{ github.event.inputs.REPACK_NAME }}; fi
          echo "--------------------------------------"
          ls upload_aonly
          echo "--------------------------------------"

      - name: Upload to Release‌‌...
        uses: ncipollo/release-action@v1.8.0
        with:
          artifacts: "${{ github.workspace }}/Tool-SGSI-build/upload_ab/*,${{ github.workspace }}/Tool-SGSI-build/upload_aonly/*"
          tag: "${{ github.event.inputs.REPACK_NAME }}_${{ env.BUILD_TIME }}"
          bodyFile: "${{ github.workspace }}/Tool-SGSI-build/SGSI/build_info.txt"
          token: ${{ secrets.GITHUB_TOKEN }}
